# Variables
# dym_image_name: ${dym_image_name}
# ci_stage_model_check: ${ci_stage_model_check}
# ci_stage_create_whitelist: ${ci_stage_create_whitelist}
# library: ${library}
# ci_check_commit: ${ci_check_commit}
# xvfb_flag: ${xvfb_flag}
# modelicapyci_test_validate_module: ${modelicapyci_test_validate_module}
# result_dir: ${result_dir}
# expire_in_time: ${expire_in_time}
# ci_create_model_whitelist_commit: ${ci_create_model_whitelist_commit}
# arg_push: ${arg_push}
# arg_PR: ${arg_PR}
# config_ci_exit_file: ${config_ci_exit_file}
# bot_update_model_whitelist_commit: ${bot_update_model_whitelist_commit}
# whitelist_model_file: ${whitelist_model_file}
# arg_wh: ${arg_wh}
# packages_per_job: ${packages_per_job}
# modelicapyci_config_structure_module: ${modelicapyci_config_structure_module}

include: '${utilities_directory}'

stages:
    - ${ci_stage_model_check}
    - ${ci_stage_create_whitelist}


.check_model_job:PR:
    image: ${dym_image_name}
    stage: ${ci_stage_model_check}
    before_script:
        - !reference [.activate_python_and_install_requirements, script]
        - !reference [.custom_install_additional_modelica_libraries, script]
    script:
        - ${xvfb_flag} python -m ${modelicapyci_test_validate_module} ${arg_PR}
    artifacts:
        when: on_failure
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - if: $CI_COMMIT_MESSAGE  =~ /${ci_check_commit}/ && $CI_PIPELINE_SOURCE == "push"
          when: always
        - !reference [.rules:PR , rules]

.check_model_job:Push:
    image: ${dym_image_name}
    stage: ${ci_stage_model_check}
    before_script:
        - !reference [.activate_python_and_install_requirements, script]
        - !reference [.custom_install_additional_modelica_libraries, script]
    script:
        - ${xvfb_flag} python -m ${modelicapyci_test_validate_module} ${arg_push}
    artifacts:
        when: on_failure
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - !reference [.rules:push , rules]

%for job_name, packages in packages_per_job.items():
Check_${library}_${job_name}:PR:
    variables:
        lib_package: ${packages}
    extends: .check_model_job:PR

%endfor

%for job_name, packages in packages_per_job.items():
Check_${library}_${job_name}:Push:
    variables:
        lib_package: ${packages}
    extends: .check_model_job:Push

%endfor

check_whitelist_job:
    image: ${dym_image_name}
    stage: ${ci_stage_create_whitelist}
    before_script:
        - !reference [.activate_python_and_install_requirements, script]
        - !reference [.custom_install_additional_modelica_libraries, script]
        - !reference [.github_ssh_auth, script]

    script:
        - ${xvfb_flag} python -m ${modelicapyci_test_validate_module} ${arg_wh}
    after_script:
        - if ! cat ${config_ci_exit_file} | grep "FAIL"; then
            exit 0;
          fi
        - message="${bot_update_model_whitelist_commit}"
        - files_to_push="${whitelist_model_file}"
        - !reference [.git_push, script]
        - cd whitelist && cd $CI_PROJECT_NAME
    artifacts:
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - if: $CI_COMMIT_MESSAGE =~ /${ci_create_model_whitelist_commit}/ && $CI_PIPELINE_SOURCE == "push"
          when: always
