# Variables
# dym_image: ${dym_image}
# ci_stage_regression_test: ${ci_stage_regression_test}
# ci_stage_ref_check :${ci_stage_ref_check}
# ci_stage_plot_ref : ${ci_stage_plot_ref}
# ci_stage_prepare : ${ci_stage_prepare}
# modelicapyci_test_reference_module: ${modelicapyci_test_reference_module}
# modelicapyci_google_chart_module : ${modelicapyci_google_chart_module}
# config_ci_exit_file : ${config_ci_exit_file}
# result_dir : ${result_dir}
# ci_regression_test_commit : $ {ci_regression_test_commit}
# expire_in_time : ${expire_in_time}
# arg_PR: ${arg_PR}
# arg_push: ${arg_push}
# arg_chart: ${arg_chart}
# packages_per_job: ${packages_per_job}
# modelicapyci_api_github_module: ${modelicapyci_api_github_module}
# api_github_create_ref_arg: ${api_github_create_ref_arg}
# api_github_arg: ${api_github_arg}
# library: ${library}
# xvfb_flag: ${xvfb_flag}
# modelicapyci_structure_module: ${modelicapyci_structure_module}
# arg_ref: ${arg_ref}
# config_ci_new_create_ref_file: ${config_ci_new_create_ref_file}
# bot_create_ref_commit: ${bot_create_ref_commit}
# ci_show_ref_commit: ${ci_show_ref_commit}
# arg_ref_check: ${arg_ref_check}
# coverage_arg: ${coverage_arg}

include: '${utilities_directory}'

stages:
    - ${ci_stage_regression_test}
    - ${ci_stage_ref_check}
    - ${ci_stage_plot_ref}
    - ${ci_stage_prepare}


.Regressiontest:PR:
    image: ${dym_image}
    stage: ${ci_stage_regression_test}
    before_script:
        - !reference [.activate_python_and_install_requirements, script]
        - !reference [.custom_install_additional_modelica_libraries, script]
    script:
        - export CI_PYTHON_CONFIG_FILE="../${ci_toml_path}"
        - cd ${library} && ${xvfb_flag} python -m ${modelicapyci_test_reference_module} ${arg_push}
    after_script:
        - if ! cat ${config_ci_exit_file} | grep "FAIL"; then
            exit 0;
          fi
        - !reference [.activate_python_and_install_requirements, script]
        - python -m ${modelicapyci_google_chart_module} ${arg_chart}
        - python -m ${modelicapyci_api_github_module} ${api_github_arg}
        - exit 1
    artifacts:
        when: on_failure
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - !reference [.rules:PR , rules]
        - if: $CI_COMMIT_MESSAGE  =~ /${ci_regression_test_commit}/ && $CI_PIPELINE_SOURCE == "push"
          when: always

.Regressiontest:Push:
    image: ${dym_image}
    stage: ${ci_stage_regression_test}
    before_script:
        - !reference [.activate_python_and_install_requirements, script]
        - !reference [.custom_install_additional_modelica_libraries, script]
    script:
        - export CI_PYTHON_CONFIG_FILE="../${ci_toml_path}"
        - cd ${library} && ${xvfb_flag} python -m ${modelicapyci_test_reference_module} ${arg_push}
    after_script:
        - if ! cat ${config_ci_exit_file} | grep "FAIL"; then
            exit 0;
          fi
        - !reference [.activate_python_and_install_requirements, script]
        - python -m ${modelicapyci_google_chart_module} ${arg_chart}
        - python -m ${modelicapyci_api_github_module} ${api_github_arg}
        - exit 1
    artifacts:
        when: on_failure
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - !reference [.rules:push , rules]

%for job_name, packages in packages_per_job.items():
Regressiontest_${library}_${job_name}:PR:
    variables:
        lib_package: ${packages}
    extends: .Regressiontest:PR

%endfor

%for job_name, packages in packages_per_job.items():
Regressiontest_${library}_${job_name}:Push:
    variables:
        lib_package: ${packages}
    extends: .Regressiontest:Push

%endfor

Regression_overall_coverage:PR:
    stage: ${ci_stage_regression_test}
    before_script:
        - !reference [.activate_python_and_install_requirements, script]
        - !reference [.custom_install_additional_modelica_libraries, script]
    script:
        - export CI_PYTHON_CONFIG_FILE="../${ci_toml_path}"
        - cd ${library} && ${xvfb_flag} python -m ${modelicapyci_test_reference_module} ${coverage_arg}
    artifacts:
        when: on_failure
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - !reference [.rules:PR , rules]
        - if: $CI_COMMIT_MESSAGE  =~ /${ci_regression_test_commit}/ && $CI_PIPELINE_SOURCE == "push"
          when: always

Regression_overall_coverage:Push:
    stage: ${ci_stage_regression_test}
    before_script:
        - !reference [.activate_python_and_install_requirements, script]
        - !reference [.custom_install_additional_modelica_libraries, script]
    script:
        - export CI_PYTHON_CONFIG_FILE="../${ci_toml_path}"
        - cd ${library} && ${xvfb_flag} python -m ${modelicapyci_test_reference_module}  ${coverage_arg}
    artifacts:
        when: on_failure
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - !reference [.rules:push , rules]


RegressionTest_Check_References:
    stage: ${ci_stage_ref_check}
    before_script:
        - !reference [.activate_python_and_install_requirements, script]
        - !reference [.github_ssh_auth, script]
        - apt-get update -y && apt-get install xdg-utils --fix-missing -y
    script:
        # TODO: Remove custom version once merged to buildingspy
        - pip uninstall buildingspy -y && pip install git+https://github.com/FWuellhorst/BuildingsPy@issue558
        - !reference [.custom_install_additional_modelica_libraries, script]
        - export CI_PYTHON_CONFIG_FILE="../${ci_toml_path}"
        - cd ${library} && ${xvfb_flag} python -m ${modelicapyci_test_reference_module} ${arg_ref_check}
    after_script:
        - if ! cat ${config_ci_exit_file} | grep "GENERATED_NEW_RESULTS"; then
            exit 0;
          fi
        - !reference [.activate_python_and_install_requirements, script]
        # Get newly created files
        - files_to_push=$(git ls-files --others --exclude-standard ${library})
        # Save them for google_charts templates
        - echo $files_to_push > ${config_ci_new_create_ref_file}
        - message="${bot_create_ref_commit}"
        - python -m ${modelicapyci_google_chart_module} ${arg_check_ref_plot}
        - python -m ${modelicapyci_api_github_module} ${api_github_create_ref_arg}
        - !reference [.git_push, script]
        - exit 1 ;

    artifacts:
        when: on_failure
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - !reference [.rules:PR , rules]
        - if: $CI_COMMIT_MESSAGE  =~ /${ci_reference_check}/ && $CI_PIPELINE_SOURCE == "push"
          when: always
