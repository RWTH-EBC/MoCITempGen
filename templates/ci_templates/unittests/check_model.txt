# dym_image_name: ${dym_image_name}
# ci_stage_model_check: ${ci_stage_model_check}
# ci_stage_create_whitelist: ${ci_stage_create_whitelist}
# commit_string: ${commit_string}
# library: ${library}
# PR_main_branch_rule: ${PR_main_branch_rule}
# ci_check_commit: ${ci_check_commit}
# dymola_python_test_url: ${dymola_python_test_url}
# dymola_python_dir: ${dymola_python_dir}
# xvfb_flag: ${xvfb_flag}
# dymola_python_test_validate_file: ${dymola_python_test_validate_file}
# result_dir: ${result_dir}
# expire_in_time: ${expire_in_time}
# ci_create_model_whitelist_commit: ${ci_create_model_whitelist_commit}
# arg_push: ${arg_push}
# config_ci_exit_file: ${config_ci_exit_file}
# bot_update_model_whitelist_commit: ${bot_update_model_whitelist_commit}
# whitelist_model_file: ${whitelist_model_file}
# arg_wh: ${arg_wh}
# arg_PR: ${arg_PR}
# python_version ${python_version}
# package_list: ${package_list}
# config_ci_changed_file: ${config_ci_changed_file}
# dymola_python_config_structure_file: ${dymola_python_config_structure_file}
# dymola_python_test_dir : ${dymola_python_test_dir}

include: '${utilities_directory}'

stages:
    - ${ci_stage_model_check}
    - ${ci_stage_create_whitelist}

.check_rules:PR:
    rules:
        - if: $CI_PIPELINE_SOURCE == "external_pull_request_event"  &&  ${commit_string}
          when: on_success
        - if: $CI_PIPELINE_SOURCE == "push"  && (${PR_main_branch_rule})
          when: on_success
        - if: $CI_COMMIT_MESSAGE  =~ /${ci_check_commit}/ && $CI_PIPELINE_SOURCE == "push"
          when: always

.check_rules:push:
    rules:
        - if: $CI_PIPELINE_SOURCE == "push"  &&  ${commit_string}
          when: on_success
        - if:  (${PR_main_branch_rule})
          when: never



.check_model_job:PR:
    image: ${dym_image_name}
    stage: ${ci_stage_model_check}
    before_script:
        - !reference [.clone_ci_templates, script]
        - !reference [.custom_install_additional_modelica_libraries, script]
        - pip install -e  ${dymola_python_test_dir}
    script:
        - ${xvfb_flag} python ${dymola_python_test_validate_module} ${arg_PR}
    artifacts:
        when: on_failure
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - !reference [.check_rules:PR , rules]

.check_model_job:Push:
    image: ${dym_image_name}
    stage: ${ci_stage_model_check}
    before_script:
        - !reference [.clone_ci_templates, script]
        - !reference [.custom_install_additional_modelica_libraries, script]
        - pip install -e  ${dymola_python_test_dir}
    script:
        - python ${dymola_python_configuration_module} --changed-model
        - git diff --raw --diff-filter=AMT HEAD^1 >  ${config_ci_changed_file}
        - ${xvfb_flag} python ${dymola_python_test_validate_module} ${arg_push}
    artifacts:
        when: on_failure
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - !reference [.check_rules:push , rules]

%for package in package_list:
Check_${library}_${package}:PR:
    variables:
        lib_package: ${package}
    extends: .check_model_job:PR

%endfor

%for package in package_list:
Check_${library}_${package}:Push:
    variables:
        lib_package: ${package}
    extends: .check_model_job:Push

%endfor

check_whitelist_job:
    image: ${dym_image_name}
    stage: ${ci_stage_create_whitelist}
    before_script:
        - !reference [.clone_ci_templates, script]
        - !reference [.custom_install_additional_modelica_libraries, script]
        - !reference [.github_ssh_auth, script]

    script:
        - mkdir whitelist && cd whitelist
        - git clone --single-branch --branch $CI_COMMIT_REF_NAME git@github.com:$Github_Repository.git
        - cd $CI_PROJECT_NAME
        - ${xvfb_flag} python ${dymola_python_test_validate_module} ${arg_wh}
    after_script:
        - cd whitelist && cd $CI_PROJECT_NAME
        - if cat ${config_ci_exit_file} | grep "FAIL"; then
            message="${bot_update_model_whitelist_commit}" ;
            git add ${whitelist_model_file} ;
            git commit -m "$message" ;
            git push git@github.com:$Github_Repository.git;
            exit 0;
          else
            exit 0 ;
          fi
    artifacts:
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - if: $CI_COMMIT_MESSAGE =~ /${ci_create_model_whitelist_commit}/ && $CI_PIPELINE_SOURCE == "push"
          when: always

