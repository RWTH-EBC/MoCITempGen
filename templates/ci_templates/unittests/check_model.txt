include: '${utilities_directory}'

stages:
    - ${ci_stage_model_check}
    - ${ci_stage_create_whitelist}

.check_model_job:
    stage: ${ci_stage_model_check}
    before_script:
        - !reference [.clone_ci_templates, script]
        - !reference [.custom_install_additional_modelica_libraries, script]
    script:
        - ${xvfb_flag} python ${dymola_python_test_validate_module}  --single-package $lib_package --library ${library} -DS ${dymola_version} ${wh_flag} ${filter_flag} ${startup_mos}
    artifacts:
        when: on_failure
        paths:
            - ${library}/${library}.$lib_package-log.txt
            - ${library}/${library}.$lib_package-errorlog.txt
        expire_in: ${expire_in_time}
    only:
        - external_pull_requests
    retry:
        max: 2
        when: runner_system_failure  
    except:
        variables:
            %for commit in except_commit_list:
            - $CI_COMMIT_MESSAGE  =~ /${commit}/
            %endfor
        refs:
            %for branch in except_branch_list:
            - ${branch}
            %endfor
            
%for package in package_list:
Check_${library}_${package}:
    variables:
        lib_package: ${package}
    extends: .check_model_job

%endfor

.dev_check_model_job:
    stage: ${ci_stage_model_check}
    before_script:
        - !reference [.clone_ci_templates, script]
        - !reference [.custom_install_additional_modelica_libraries, script]
    script:
        - ${xvfb_flag} python ${dymola_python_test_validate_module}  --single-package $lib_package --library ${library} -DS ${dymola_version} ${wh_flag} ${filter_flag} ${startup_mos}
    artifacts:
        when: on_failure
        paths:
            - ${library}/${library}.$lib_package-log.txt
            - ${library}/${library}.$lib_package-errorlog.txt
        expire_in: ${expire_in_time}
    only:
        refs:
            %for branch in except_branch_list:
            - ${branch}
            %endfor
    retry:
        max: 2
        when: runner_system_failure

%for package in package_list:
Development_Check_${library}_${package}:
    variables:
        lib_package: ${package}
    extends: .dev_check_model_job

%endfor

.check_changed_models_job:
    stage: ${ci_stage_model_check}
    before_script:
        - !reference [.clone_ci_templates, script]
        - !reference [.custom_install_additional_modelica_libraries, script]
    script:
        - python ${dymola_python_configuration_module} --changed-model
        - git diff --raw --diff-filter=AMT HEAD^1 >  ${config_ci_changed_file}
        - ${xvfb_flag} python ${dymola_python_test_validate_module} --single-package $lib_package --library ${library} -DS ${dymola_version} -CM ${startup_mos}
    artifacts:
        when: on_failure
        paths:
            - ${library}/${library}.$lib_package-log.txt
            - ${library}/${library}.$lib_package-errorlog.txt
        expire_in: ${expire_in_time}
    except:
        refs:
            - external_pull_requests
            ${merge_branch}
            %for branch in except_branch_list:
            - ${branch}
            %endfor
            - /^${html_praefix}.*$/
        variables:
            %for commit in except_commit_list:
            - $CI_COMMIT_MESSAGE  =~ /${commit}/
            %endfor
    retry:
        max: 2
        when: runner_system_failure

%for package in package_list:
Check_${library}_${package}_changed_models:
    variables:
        lib_package: ${package}
    only:
        changes:
            - ${library}/${package}/**/*
    extends: .check_changed_models_job

%endfor

.CI_check_model_job:
    stage: ${ci_stage_model_check}
    before_script:
        - !reference [.clone_ci_templates, script]
        - !reference [.custom_install_additional_modelica_libraries, script]
    script:
        - ${xvfb_flag} python ${dymola_python_test_validate_module} --single-package $lib_package --library ${library} -DS ${dymola_version} ${wh_flag} ${filter_flag} ${startup_mos}
    artifacts:
        when: on_failure
        paths:
            - ${library}/${library}.$lib_package-log.txt
            - ${library}/${library}.$lib_package-errorlog.txt
        expire_in: ${expire_in_time}
    only:
        variables:
            - $CI_COMMIT_MESSAGE  =~ /${ci_check_commit}/
    except:
        refs:
            - external_pull_requests
    retry:
        max: 2
        when: runner_system_failure  
    
            
%for package in package_list:
CI_Check_${library}_${package}:
    variables:
        lib_package: ${package}
    extends: .CI_check_model_job

%endfor

whitelist_job:
    stage: ${ci_stage_create_whitelist}
    before_script:
        - !reference [.clone_ci_templates, script]
        - !reference [.custom_install_additional_modelica_libraries, script]
        - !reference [.github_ssh_auth, script]
    script:
        - mkdir whitelist && cd whitelist
        - git clone --single-branch --branch $CI_COMMIT_REF_NAME git@github.com:$Github_Repository.git
        - cd $CI_PROJECT_NAME
        - ${xvfb_flag} python ${dymola_python_test_validate_module} -DS ${dymola_version} --repo-dir ${wh_library} ${git_url} ${wh_path} --library ${library} --wh-library ${wh_library} --whitelist ${startup_mos}
    after_script:
        - cd whitelist && cd $CI_PROJECT_NAME
        - if cat ${config_ci_exit_file} | grep "FAIL"; then
            message="${bot_update_model_wh_commit}" ;
            git add ${wh_model_file} ;
            git commit -m "$message" ;
            git push git@github.com:$Github_Repository.git ;
            GREEN='\033[0;32m' ;
            NC='\033[0m' ;
            echo  -e "$GREEN New html whitelist files were pushed to this branch.$NC" ;
            exit 0;
          else 
            echo  -e "$GREEN Whitelist is already up to date. Please delete the version number in file ${wh_model_file}, if you want to recreate the whitelist.$NC" ;
            exit 0 ;
          fi
    artifacts:
        paths:
            - whitelist/$CI_PROJECT_NAME/${wh_model_file}
            - whitelist/$CI_PROJECT_NAME/${wh_library}/${wh_library}-errorlog.txt
        expire_in: ${expire_in_time}
    only:
        variables:
            - $CI_COMMIT_MESSAGE =~ /${ci_create_model_wh_commit}/
    except:
        refs:
            - external_pull_requests
