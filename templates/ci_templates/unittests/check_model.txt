# ${dym_image_name}
# ${ci_stage_model_check}
# ${ci_stage_create_whitelist}
# ${commit_string}
# ${library}
# ${PR_main_branch_rule}
# ${ci_check_commit}
# ${dymola_python_test_url}
# ${dymola_python_dir}
# ${xvfb_flag}
# ${dymola_python_test_validate_file}
# ${result_dir}
# ${expire_in_time}
# ${ci_create_model_wh_commit}
# ${arg_push}
# ${config_ci_exit_file}
# ${bot_update_model_wh_commit}
# ${wh_model_file}
# ${arg_wh}
# ${arg_PR}


stages:
    - ${ci_stage_model_check}
    - ${ci_stage_create_whitelist}

.check_rules:PR:
    rules:
        - if: $CI_PIPELINE_SOURCE == "external_pull_requests"  &&  ${commit_string}
          when: on_success
        - if: $CI_PIPELINE_SOURCE == "push"  && (${PR_main_branch_rule})
          when: on_success
        - if: $CI_COMMIT_MESSAGE  =~ /${ci_check_commit}/ && $CI_PIPELINE_SOURCE == "push"
          when: always

.check_rules:push:
    rules:
        - if: $CI_PIPELINE_SOURCE == "push"  &&  ${commit_string}
          when: on_success
        - if:  (${PR_main_branch_rule})
          when: never



.check_model_job:PR:
    image: ${dym_image_name}
    stage: ${ci_stage_model_check}
    before_script:
        - source activate ${python_version}
        - git clone ${dymola_python_test_url}
        - pip install -r ${dymola_python_dir}/requirements.txt
        - export PYTHONPATH=Dymola_python_tests
    script:
        - ${xvfb_flag} python ${dymola_python_test_validate_file}  ${arg_PR}
    artifacts:
        when: on_failure
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - !reference [.check_rules:PR , rules]

.check_model_job:Push:
    image: ${dym_image_name}
    stage: ${ci_stage_model_check}
    before_script:
        - source activate ${python_version}
        - git clone ${dymola_python_test_url}
        - pip install -r ${dymola_python_dir}/requirements.txt
        - export PYTHONPATH=Dymola_python_tests
    script:
        - ${xvfb_flag} python ${dymola_python_test_validate_file}  ${arg_push}
    artifacts:
        when: on_failure
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - !reference [.check_rules:push , rules]

%for package in package_list:
Check_${library}_${package}:PR:
    variables:
        lib_package: ${package}
    extends: .check_model_job:PR

%endfor

%for package in package_list:
Check_${library}_${package}:Push:
    variables:
        lib_package: ${package}
    extends: .check_model_job:Push

%endfor

check_whitelist_job:
    image: ${dym_image_name}
    stage: ${ci_stage_create_whitelist}
    before_script:
        - source activate ${python_version}
        - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y)'
        - eval $(ssh-agent -s)
        - mkdir -p ~/.ssh
        - ssh-keyscan github.com >> ~/.ssh/known_hosts
        - ssh-agent -a /tmp/ssh_agent.sock > /dev/null
        - echo "$GITHUB_PRIVATE_KEY" > ~/.ssh/id_rsa
        - chmod 600 ~/.ssh/id_rsa
        - git config --global user.name "$GITLAB_USER_NAME"
        - git config --global user.email "$GITLAB_USER_EMAIL"
        - export PYTHONPATH=Dymola_python_tests
    script:
        - mkdir whitelist && cd whitelist
        - git clone --single-branch --branch $CI_COMMIT_REF_NAME git@github.com:$Github_Repository.git
        - cd $CI_PROJECT_NAME
        - git clone ${dymola_python_test_url}
        - pip install -r ${dymola_python_dir}/requirements.txt
        - ${xvfb_flag} python ${dymola_python_test_validate_file}  ${arg_wh}
    after_script:
        - cd whitelist && cd $CI_PROJECT_NAME
        - if cat ${config_ci_exit_file} | grep "FAIL"; then
            message="${bot_update_model_wh_commit}" ;
            git add ${wh_model_file} ;
            git commit -m "$message" ;
            git push git@github.com:$Github_Repository.git ;
            exit 0;
          else
            exit 0 ;
          fi
    artifacts:
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - if: $CI_COMMIT_MESSAGE =~ /${ci_create_model_wh_commit}/ && $CI_PIPELINE_SOURCE == "push"
          when: always

