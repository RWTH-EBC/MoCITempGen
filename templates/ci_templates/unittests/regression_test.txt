stages:
    - ${ci_stage_regression_test}
    - ${ci_stage_ref_check}
    - ${ci_stage_plot_ref}
    - ${ci_stage_prepare}

.CI_Regressiontest:
    stage: ${ci_stage_regression_test}
    before_script:
        - git clone ${dymola_python_test_url}
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate ${python_version}
        - pip install --upgrade ${buildingspy_upgrade}
        - export PYTHONIOENCODING=utf-8
    script:
        - cd ${library} && ${xvfb_flag} python ${dymola_python_test_reference_file} -n 4 --tool dymola --single-package "$lib_package" --library ${library} --batch -DS ${dymola_version}
    after_script:
        - if cat ${config_ci_exit_file} | grep "FAIL"; then
            export PIP_CACHE_DIR="/opt/cache/pip" ;
            source activate ${python_version} ;
            pip install pandas mako matplot ;
            mkdir -p data ;
            mkdir -p data/plots ;
            cp -r ${library}/simulator-dymola.log data ;
            cp -r ${library}/unitTests-dymola.log data ;
            cp -r ${library}/funnel_comp data ;
            python ${dymola_python_google_chart_file} --line-html --error --funnel-comp --single-package $lib_package ;
            cp -r ${chart_dir}/$lib_package data/plots ;
          else
            echo "Test was successful!" ;
          fi
    artifacts:
        when: on_failure
        paths:
          - data
        expire_in: ${expire_in_time}
    only:
        variables:
            - $CI_COMMIT_MESSAGE  =~ /${ci_regression_test_commit}/
    except:
        refs:
            - external_pull_requests
    retry:
        max: 2
        when: runner_system_failure




%for package in package_list:
CI_Regressiontest_${library}_${package}:
    variables:
        lib_package: ${library}.${package}
    extends: .CI_Regressiontest
%endfor



.dev_Regressiontest:
    stage: ${ci_stage_regression_test}
    before_script:
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate ${python_version}
        - pip install --upgrade ${buildingspy_upgrade}
        - export PYTHONIOENCODING=utf-8
        - git clone ${dymola_python_test_url}
    script:
        - cd ${library} && ${xvfb_flag} python ${dymola_python_test_reference_file} -n 4 --tool dymola --single-package "$lib_package" --library ${library} --batch -DS ${dymola_version}

    after_script:
        - if cat ${config_ci_exit_file} | grep "FAIL"; then
            export PIP_CACHE_DIR="/opt/cache/pip" ;
            source activate ${python_version} ;
            pip install pandas mako matplot ;
            mkdir -p data ;
            cp -r ${library}/simulator-dymola.log data ;
            cp -r ${library}/unitTests-dymola.log data ;
            cp -r ${library}/funnel_comp data ;
            python ${dymola_python_google_chart_file} --line-html --error --funnel-comp --single-package $lib_package ;
            cp -r ${chart_dir}/$lib_package data/plots ;
          else
            echo "Test was successful!" ;
          fi
    artifacts:
        when: on_failure
        paths:
          - data
        expire_in: ${expire_in_time}
    only:
        refs:
            %for branch in except_branch_list:
            - ${branch}
            %endfor
    retry:
        max: 2
        when: runner_system_failure

%for package in package_list:
Development_Regressiontest_${library}_${package}:
    variables:
        lib_package: ${library}.${package}
    extends: .dev_Regressiontest

%endfor


CI_create_plots:
    stage: ${ci_stage_prepare}
    before_script:
        - source activate ${python_version}
        - pip install --upgrade pip &&  apt-get update -y && apt-get install zip unzip -y
        - pip install pandas mako matplot toml requests
        - export PYTHONIOENCODING=utf-8
        - git clone ${dymola_python_test_url}
    script:
        - mkdir -p $CI_COMMIT_REF_NAME/plots
        - python ${dymola_python_google_chart_file}  --create-layout --library ${library} --single-package ${library}
        - cp -r data/plots/*  $CI_COMMIT_REF_NAME/plots
        - python ${dymola_python_api_github_file}  --working-branch $CI_COMMIT_REF_NAME --github-repo $Github_Repository --gitlab-page $GITLAB_Page --github-token $GITHUB_API_TOKEN --post-pr-comment --prepare-plot
    artifacts:
        paths:
         - $CI_COMMIT_REF_NAME/plots
    only:
        variables:
            - $CI_COMMIT_MESSAGE  =~ /${ci_regression_test_commit}/
    except:
        refs:
            - external_pull_requests
    when: on_failure
    needs:
    %for package in package_list:
    - job: CI_Regressiontest_${library}_${package}
      artifacts: true
    %endfor

.Regressiontest_job:
    stage: ${ci_stage_regression_test}
    before_script:
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate ${python_version}
        - pip install --upgrade ${buildingspy_upgrade}
        - export PYTHONIOENCODING=utf-8
        - git clone ${dymola_python_test_url}
    script:
        - cd ${library} && ${xvfb_flag} python ${dymola_python_test_reference_file} -n 4 --tool dymola --single-package "$lib_package" --library ${library} --batch -DS ${dymola_version}
    after_script:
        - if cat ${config_ci_exit_file} | grep "FAIL"; then
            export PIP_CACHE_DIR="/opt/cache/pip" ;
            source activate ${python_version} ;
            pip install pandas mako matplot ;
            mkdir -p data ;
            cp -r ${library}/simulator-dymola.log data ;
            cp -r ${library}/unitTests-dymola.log data ;
            cp -r ${library}/funnel_comp data ;
            python ${dymola_python_google_chart_file} --line-html --error --funnel-comp --single-package $lib_package ;
            cp -r ${chart_dir}/$lib_package data/plots ;
          else
            echo "Test was successful!" ;
          fi
    artifacts:
        when: on_failure
        paths:
          - data
        expire_in: ${expire_in_time}
    only:
        refs:
            - external_pull_requests
    except:
        variables:
            %for commit in except_commit_list:
            - $CI_COMMIT_MESSAGE  =~ /${commit}/
            %endfor
        refs:
            %for branch in except_branch_list:
            - ${branch}
            %endfor
    retry:
        max: 2
        when: runner_system_failure

%for package in package_list:
Regressiontest_${library}_${package}:
    variables:
        lib_package: ${library}.${package}
    extends: .Regressiontest_job

%endfor

Regression_overall_coverage:
    stage: ${ci_stage_regression_test}
    before_script:
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate ${python_version}
        - pip install --upgrade ${buildingspy_upgrade}
        - export PYTHONIOENCODING=utf-8
        - git clone ${dymola_python_test_url}
    script:
        - cd ${library} && ${xvfb_flag} python ${dymola_python_test_reference_file} --coverage-only
    artifacts:
        when: on_failure
        paths:
            - ${library}/simulator-dymola.log
            - ${library}/unitTests-dymola.log
        expire_in: ${expire_in_time}
    only:
        refs:
            - external_pull_requests
    except:
        variables:
            %for commit in except_commit_list:
            - $CI_COMMIT_MESSAGE  =~ /${commit}/
            %endfor
        refs:
            %for branch in except_branch_list:
            - ${branch}
            %endfor
    retry:
        max: 2
        when: runner_system_failure

prepare_create_plots:
    stage: ${ci_stage_prepare}
    before_script:
        - source activate ${python_version}
        - pip install --upgrade ${buildingspy_upgrade}
        - pip install --upgrade pip &&  apt-get update -y && apt-get install zip unzip -y
        - pip install pandas mako matplot toml requests
        - export PYTHONIOENCODING=utf-8
        - git clone ${dymola_python_test_url}
    script:
        - mkdir -p $CI_COMMIT_REF_NAME/plots
        - python ${dymola_python_google_chart_file}  --create-layout --library ${library} --single-package ${library}
        - cp -r data/plots/*  $CI_COMMIT_REF_NAME/plots
        - python ${dymola_python_api_github_file}  --working-branch $CI_COMMIT_REF_NAME --github-repo $Github_Repository --gitlab-page $GITLAB_Page --github-token $GITHUB_API_TOKEN --post-pr-comment --prepare-plot
    artifacts:
        paths:
         - $CI_COMMIT_REF_NAME/plots
    only:
        refs:
            - external_pull_requests
    except:
        variables:
            %for commit in except_commit_list:
            - $CI_COMMIT_MESSAGE  =~ /${commit}/
            %endfor
        refs:
            %for branch in except_branch_list:
            - ${branch}
            %endfor
    when: on_failure
    needs:
    %for package in package_list:
    - job: Regressiontest_${library}_${package}
      artifacts: true
    %endfor

.Regressiontest_changed_Job:
    stage: ${ci_stage_regression_test}
    before_script:
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate ${python_version}
        - pip install --upgrade ${buildingspy_upgrade}
        - export PYTHONIOENCODING=utf-8
        - git clone ${dymola_python_test_url}
    script:
        - python ${dymola_python_configuration_file} --changed-model
        - git diff --raw --diff-filter=AMT HEAD^1 > ${config_ci_changed_file}
        - cd ${library} && ${xvfb_flag} python ${dymola_python_test_reference_file} -n 4 --tool dymola --single-package $lib_package --library ${library} --batch -DS ${dymola_version} -n 2 --modified-model
    after_script:
        - if cat ${config_ci_exit_file} | grep "FAIL"; then
            export PIP_CACHE_DIR="/opt/cache/pip";
            source activate ${python_version};
            pip install pandas mako matplot;
            mkdir -p data ;
            cp -r ${library}/simulator-dymola.log data ;
            cp -r ${library}/unitTests-dymola.log data ;
            cp -r ${library}/funnel_comp data ;
            python ${dymola_python_google_chart_file} --line-html --error --funnel-comp --single-package $lib_package;
             cp -r ${chart_dir}/$lib_package data/plots ;
          else
            echo "Test was successful!";
          fi
    artifacts:
        when: on_failure
        paths:
            - data
        expire_in: ${expire_in_time}
    except:
        refs:
            - external_pull_requests
            ${merge_branch}
            %for branch in except_branch_list:
            - ${branch}
            %endfor
            - /^${html_praefix}.*$/
        variables:
            %for commit in except_commit_list:
            - $CI_COMMIT_MESSAGE  =~ /${commit}/
            %endfor
    only:    
        changes:
            - ${library}/**/*
    retry:
        max: 2
        when: runner_system_failure

%for package in package_list:
Changed_Regressiontest_${library}_${package}:
    variables:
        lib_package: ${library}.${package}
    extends: .Regressiontest_changed_Job

%endfor


Changed_create_plots:
    stage: ${ci_stage_prepare}
    before_script:
        - source activate ${python_version}
        - pip install --upgrade pip &&  apt-get update -y && apt-get install zip unzip -y
        - pip install pandas mako matplot requests toml
        - export PYTHONIOENCODING=utf-8
        - git clone ${dymola_python_test_url}
    script:
        - mkdir -p $CI_COMMIT_REF_NAME/plots
        - python ${dymola_python_google_chart_file}  --create-layout --library ${library} --single-package ${library}
        - cp -r data/plots/*  $CI_COMMIT_REF_NAME/plots
    artifacts:
        paths:
         - $CI_COMMIT_REF_NAME/plots
    except:
        refs:
            - external_pull_requests
            ${merge_branch}
            %for branch in except_branch_list:
            - ${branch}
            %endfor
            - /^${html_praefix}.*$/
        variables:
            %for commit in except_commit_list:
            - $CI_COMMIT_MESSAGE  =~ /${commit}/
            %endfor
    only:    
        changes:
            - ${library}/**/*
    retry:
        max: 2
        when: runner_system_failure
    when: on_failure
    needs:
    %for package in package_list:
    - job: Changed_Regressiontest_${library}_${package}
      artifacts: true
    %endfor


RegressionTest_Check_References:
    stage: ${ci_stage_ref_check}
    before_script:
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate ${python_version}
        - pip install --upgrade ${buildingspy_upgrade}
        - apt-get update -y && apt-get install xdg-utils --fix-missing -y
        - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
        - export PYTHONIOENCODING=utf-8
        - eval $(ssh-agent -s)
        - mkdir -p ~/.ssh
        - ssh-keyscan github.com >> ~/.ssh/known_hosts
        - ssh-agent -a /tmp/ssh_agent.sock > /dev/null
        - echo "$GITHUB_PRIVATE_KEY" > ~/.ssh/id_rsa
        - chmod 600 ~/.ssh/id_rsa
        - git config --global user.name "$GITLAB_USER_NAME"
        - git config --global user.email "$GITLAB_USER_EMAIL"
    script:
        - mkdir CorrectedVersion && cd CorrectedVersion
        - git clone --single-branch --branch $CI_COMMIT_REF_NAME git@github.com:$Github_Repository.git
        - cd $CI_PROJECT_NAME
        - git clone ${dymola_python_test_url}
        - python ${dymola_python_configuration_file} --ci-interactive
        - cd ${library} && ${xvfb_flag} python ${dymola_python_test_reference_file} --create-ref -DS ${dymola_version}  -n 4 < ../${config_ci_eof_file}
    after_script:
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate ${python_version}
        - export PYTHONIOENCODING=utf-8
        - cd CorrectedVersion && cd $CI_PROJECT_NAME
        - git ls-files --others --exclude-standard
        - if cat ${config_ci_exit_file} | grep "FAIL"; then
            push_model=$(git ls-files --others --exclude-standard) ;
            echo $push_model ;
            (git ls-files --others --exclude-standard) > ${config_ci_new_ref_file} ;
            message="${bot_create_ref_commit}" ;
            git add $push_model ;
            git commit -m "$message";
            git push git@github.com:$Github_Repository.git ;
            GREEN='\033[0;32m' ;
            NC='\033[0m' ;
            echo  -e "$GREEN New reference files were pushed to this branch. The job was successfully and the newly added files are tested in another commit. $NC " ;
            pip install pandas mako matplot;
            python ${dymola_python_google_chart_file} --line-html --new-ref --single-package ${library} ;
            cd .. ; 
            cd .. ;
            mkdir -p $CI_COMMIT_REF_NAME/plots ;
            mkdir -p data ;
            cp -r CorrectedVersion/$CI_PROJECT_NAME/${library}/simulator-dymola.log data ;
            cp -r CorrectedVersion/$CI_PROJECT_NAME/${library}/unitTests-dymola.log data ;
            cp -r CorrectedVersion/$CI_PROJECT_NAME/${library}/funnel_comp data ;
            cp -r CorrectedVersion/$CI_PROJECT_NAME/Referencefiles data ;
            cp -r CorrectedVersion/$CI_PROJECT_NAME/${chart_dir}/* $CI_COMMIT_REF_NAME/plots ;
            exit 1 ;
          else
            exit 0 ;
          fi
    artifacts:
        when: on_failure
        paths:
            - data
            - $CI_COMMIT_REF_NAME/plots
        expire_in: ${expire_in_time}
    except:
        refs:
            ${merge_branch}
            %for branch in except_branch_list:
            - ${branch}
            %endfor
        variables:
            %for commit in except_commit_list:
            - $CI_COMMIT_MESSAGE  =~ /${commit}/
            %endfor
    only:
        - external_pull_requests

plot_reference_results:
    stage: plot_ref
    before_script:
        - source activate ${python_version}
        - pip install --upgrade pip &&  apt-get update -y && apt-get install zip unzip -y
        - pip install pandas mako matplot toml requests
        - export PYTHONIOENCODING=utf-8
        - git clone ${dymola_python_test_url}
    script:
        - mkdir -p $CI_COMMIT_REF_NAME/plots
        - python ${dymola_python_google_chart_file} --line-html --show-ref --single-package ${library} --library ${library}
        - cp -r ${chart_dir}/* $CI_COMMIT_REF_NAME/plots
        - python ${dymola_python_api_github_file} --working-branch $CI_COMMIT_REF_NAME --github-repo $Github_Repository --gitlab-page $GITLAB_Page --github-token $GITHUB_API_TOKEN --post-pr-comment --show-plot
    artifacts:
        when: always
        paths:
            - $CI_COMMIT_REF_NAME/plots
    only:
        variables:
            - $CI_COMMIT_MESSAGE  =~ /${ci_show_ref_commit}/
        refs:
            - external_pull_requests
