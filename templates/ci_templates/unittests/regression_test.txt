# dym_image: ${dym_image}
# ci_stage_regression_test: ${ci_stage_regression_test}
# ci_stage_ref_check :${ci_stage_ref_check}
# ci_stage_plot_ref : ${ci_stage_plot_ref}
# ci_stage_prepare : ${ci_stage_prepare}
# dymola_python_test_url_  ${dymola_python_test_url}
# python_version : ${python_version}
# buildingspy_upgrade : ${buildingspy_upgrade}
# ${dymola_python_dir} : dymola_python_dir
# dymola_python_test_reference_file: ${dymola_python_test_reference_file}
# dymola_python_google_chart_file : ${dymola_python_google_chart_file}
# config_ci_exit_file : ${config_ci_exit_file}
# result_dir : ${result_dir}
# arg_chart : ${arg_chart}
# ci_regression_test_commit : $ {ci_regression_test_commit}
# expire_in_time : ${expire_in_time}
# arg_PR: ${arg_PR}
# arg_push: ${arg_push}
# arg_chart: ${arg_chart}
# package_list: ${package_list}
# dymola_python_api_github_file: ${dymola_python_api_github_file}
# {arg_create_plots} : ${arg_create_plots}
# api_github_arg: ${api_github_arg}
# commit_string = ${commit_string}
# PR_main_branch_rule : &{PR_main_branch_rule}
# library: ${library}
# ci_regression_test_commit :  ${ci_regression_test_commit}
# xvfb_flag: ${xvfb_flag}
# dymola_python_structure_file: ${dymola_python_structure_file}
# arg_ref: ${arg_ref}
# config_ci_eof_file: ${config_ci_eof_file}
# config_ci_new_create_ref_file: ${config_ci_new_create_ref_file}
# bot_create_ref_commit: ${bot_create_ref_commit}
# ci_show_ref_commit: ${ci_show_ref_commit}
stages:
    - ${ci_stage_regression_test}
    - ${ci_stage_ref_check}
    - ${ci_stage_plot_ref}
    - ${ci_stage_prepare}

.regression_rules:PR:
    rules:
        - if: $CI_PIPELINE_SOURCE == "external_pull_request_event"  &&  ${commit_string}
          when: on_success
        - if: $CI_PIPELINE_SOURCE == "push"  && (${PR_main_branch_rule})
          when: on_success


.regression_rules:Push:
    rules:
        - if: $CI_PIPELINE_SOURCE == "push"  &&  ${commit_string}
          when: on_success
        - if:  (${PR_main_branch_rule})
          when: never


.Regressiontest:PR:
    image: ${dym_image}
    stage: ${ci_stage_regression_test}
    before_script:
        - git clone ${dymola_python_test_url}
        - source activate ${python_version}
        - pip install -e  ${dymola_python_test_dir}
        - pip install --upgrade ${buildingspy_upgrade}

    script:
        - cd ${library} && ${xvfb_flag} python ../${dymola_python_test_reference_file} ${arg_PR}
    after_script:
        - if cat ${config_ci_exit_file} | grep "FAIL"; then
            source activate ${python_version} ;
            python ${dymola_python_google_chart_file} ${arg_chart} ;
            exit 1 ;
          else
            exit 0 ;
          fi
    artifacts:
        when: on_failure
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - !reference [.regression_rules:PR , rules]
        - if: $CI_COMMIT_MESSAGE  =~ /${ci_regression_test_commit}/ && $CI_PIPELINE_SOURCE == "push"
          when: always


.Regressiontest:Push:
    image: ${dym_image}
    stage: ${ci_stage_regression_test}
    before_script:
        - git clone ${dymola_python_test_url}
        - source activate ${python_version}
        - pip install -e  ${dymola_python_test_dir}
        - pip install --upgrade ${buildingspy_upgrade}
    script:
        - cd ${library} && ${xvfb_flag} python ../${dymola_python_test_reference_file} ${arg_push}
    after_script:
        - if cat ${config_ci_exit_file} | grep "FAIL"; then
            source activate ${python_version} ;
            python ${dymola_python_google_chart_file} ${arg_chart} ;
            exit 1 ;
          else
            exit 0 ;
          fi
    artifacts:
        when: on_failure
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - !reference [.regression_rules:Push , rules]


%for package in package_list:
Regressiontest_${library}_${package}:PR:
    variables:
        lib_package: ${library}.${package}
    extends: .Regressiontest:PR

%endfor

%for package in package_list:
Regressiontest_${library}_${package}:Push:
    variables:
        lib_package: ${library}.${package}
    extends: .Regressiontest:Push

%endfor


Regression_overall_coverage:PR:
    stage: ${ci_stage_regression_test}
    before_script:
        - source activate ${python_version}
        - git clone ${dymola_python_test_url}
        - pip install -e  ${dymola_python_test_dir}
        - pip install --upgrade ${buildingspy_upgrade}
    script:
        - cd ${library} && ${xvfb_flag} python ../${dymola_python_test_reference_file} ${coverage_arg}
    artifacts:
        when: on_failure
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - !reference [.regression_rules:PR , rules]
        - if: $CI_COMMIT_MESSAGE  =~ /${ci_regression_test_commit}/ && $CI_PIPELINE_SOURCE == "push"
          when: always


Regression_overall_coverage:Push:
    stage: ${ci_stage_regression_test}
    before_script:
        - source activate ${python_version}
        - git clone ${dymola_python_test_url}
        - pip install -e  ${dymola_python_test_dir}
    script:
        - cd ${library} && ${xvfb_flag} python ../${dymola_python_test_reference_file} ${coverage_arg}
    artifacts:
        when: on_failure
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - !reference [.regression_rules:Push , rules]


prepare_create_plots:Push:
    stage: ${ci_stage_prepare}
    before_script:
        - source activate ${python_version}
        - git clone ${dymola_python_test_url}
        - pip install -e  ${dymola_python_test_dir}
    script:
        - python ${dymola_python_google_chart_file} ${arg_create_plots}
        - python ${dymola_python_api_github_file}   ${api_github_arg}
    artifacts:
        paths:
            - ${result_dir}/
    rules:
        - !reference [.regression_rules:Push , rules]
    needs:
    %for package in package_list:
    - job: Regressiontest_${library}_${package}:Push
      artifacts: true
    %endfor

prepare_create_plots:PR:
    stage: ${ci_stage_prepare}
    before_script:
        - source activate ${python_version}
        - git clone ${dymola_python_test_url}
        - pip install -e ${dymola_python_test_dir}
    script:
        - python ${dymola_python_google_chart_file} ${arg_create_plots}
        - python ${dymola_python_api_github_file}   ${api_github_arg}
    artifacts:
        paths:
            - ${result_dir}/
    rules:
        - !reference [.regression_rules:PR , rules]
        - if: $CI_COMMIT_MESSAGE  =~ /${ci_regression_test_commit}/ && $CI_PIPELINE_SOURCE == "push"
          when: always
    needs:
    %for package in package_list:
    - job: Regressiontest_${library}_${package}:PR
      artifacts: true
    %endfor



RegressionTest_Check_References:
    stage: ${ci_stage_ref_check}
    before_script:
        - source activate ${python_version}
        - pip install --upgrade ${buildingspy_upgrade}
        - apt-get update -y && apt-get install xdg-utils --fix-missing -y
        - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
        - eval $(ssh-agent -s)
        - mkdir -p ~/.ssh
        - ssh-keyscan github.com >> ~/.ssh/known_hosts
        - ssh-agent -a /tmp/ssh_agent.sock > /dev/null
        - echo "$GITHUB_PRIVATE_KEY" > ~/.ssh/id_rsa
        - chmod 600 ~/.ssh/id_rsa
        - git config --global user.name "$GITLAB_USER_NAME"
        - git config --global user.email "$GITLAB_USER_EMAIL"

    script:
        - mkdir CorrectedVersion && cd CorrectedVersion
        - git clone --single-branch --branch $CI_COMMIT_REF_NAME git@github.com:$Github_Repository.git
        - cd $CI_PROJECT_NAME
        - git clone ${dymola_python_test_url}
        - pip install -e  ${dymola_python_test_dir}
        - python ${dymola_python_structure_file} --create-ref
        - cd ${library} && ${xvfb_flag} python ../${dymola_python_test_reference_file} --create-ref  < ../${config_ci_eof_file}
    after_script:
        - source activate ${python_version}
        - cd CorrectedVersion/$CI_PROJECT_NAME
        - if cat ${config_ci_exit_file} | grep "FAIL"; then
            push_model=$(git ls-files --others --exclude-standard --directory ${library}) ;
            (git ls-files --others --exclude-standard --directory ${library}) > ${config_ci_new_create_ref_file} ;
            message="${bot_create_ref_commit}" ;
            python ${dymola_python_google_chart_file} ${arg_check_ref_plot} ;
            git add $push_model ;
            git commit -m "$message";
            git push git@github.com:$Github_Repository.git ;
            mkdir -p ../../${result_dir}/ ;
            cp -r ${result_dir}/* ../../${result_dir} ;
            exit 1 ;
          else
            exit 0 ;
          fi
    artifacts:
        when: on_failure
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - !reference [.regression_rules:PR , rules]
        - if: $CI_COMMIT_MESSAGE  =~ /${ci_reference_check}/ && $CI_PIPELINE_SOURCE == "push"
          when: always

plot_reference_results:
    stage: plot_ref
    before_script:
        - source activate ${python_version}
        - git clone ${dymola_python_test_url}
        - pip install -e  ${dymola_python_test_dir}

    script:
        - python ${dymola_python_google_chart_file} --line-html --show-ref --single-package ${library} --library ${library}
        - python ${dymola_python_api_github_file} --working-branch $CI_COMMIT_REF_NAME --github-repo $Github_Repository --gitlab-page $GITLAB_Page --github-token $GITHUB_API_TOKEN --post-pr-comment --show-plot
    artifacts:
        when: always
        paths:
            - ${result_dir}/
    rules:
        - if: $CI_COMMIT_MESSAGE  =~ /${ci_show_ref_commit}/
          when: always
