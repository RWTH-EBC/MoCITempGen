# dym_image_name : ${dym_image_name}
# ci_stage_simulate: ${ci_stage_simulate}
# ci_stage_create_exampeL_whitelist: ${ci_stage_create_exampeL_whitelist}
# arg_push : ${arg_push}
# arg_PR : ${arg_PR}
# commit_string: ${commit_string}
# PR_main_branch_rule: ${PR_main_branch_rule}
# library: ${library}
# ci_check_commit ${ci_check_commit}
# python_version: ${python_version}
# dymola_python_test_url: ${dymola_python_test_url}
# dymola_python_dir: ${dymola_python_dir}
# dymola_python_test_validate_file: ${dymola_python_test_validate_file}
# package_list: ${package_list}
# arg_wh: ${arg_wh}
# bot_update_model_wh_commit: ${bot_update_model_wh_commit}
# wh_model_file: ${wh_model_file}
# ci_create_model_wh_commit: ${ci_create_model_wh_commit}
# result_dir : ${result_dir}
# expire_in_time: ${expire_in_time}
# xvfb_flag : ${xvfb_flag}
# config_ci_exit_file : ${config_ci_exit_file}


stages:
    - ${ci_stage_simulate}
    - ${ci_stage_create_exampeL_whitelist}

.sim_rules:PR:
    rules:
        - if: $CI_PIPELINE_SOURCE == "external_pull_request_event"  &&  ${commit_string}
          when: on_success
        - if: $CI_PIPELINE_SOURCE == "push"  && (${PR_main_branch_rule})
          when: on_success
        - if: $CI_COMMIT_MESSAGE  =~ /${ci_check_commit}/ && $CI_PIPELINE_SOURCE == "push"
          when: always

.sim_rules:Push:
    rules:
        - if: $CI_PIPELINE_SOURCE == "push"  &&  ${commit_string}
          when: on_success
        - if:  (${PR_main_branch_rule})
          when: never

.simulate_model_job:PR:
    image: ${dym_image_name}
    stage: ${ci_stage_simulate}
    before_script:
        - source activate ${python_version}
        - git clone ${dymola_python_test_url}
        - pip install -e  ${dymola_python_test_dir}
    script:
        - ${xvfb_flag} python ${dymola_python_test_validate_file}  ${arg_PR}
    artifacts:
        when: on_failure
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - !reference [.sim_rules:PR , rules]

.simulate_model_job:Push:
    image: ${dym_image_name}
    stage: ${ci_stage_simulate}
    before_script:
        - source activate ${python_version}
        - git clone ${dymola_python_test_url}
        - pip install -e  ${dymola_python_test_dir}
    script:
        - ${xvfb_flag} python ${dymola_python_test_validate_file}  ${arg_push}
    artifacts:
        when: on_failure
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - !reference [.sim_rules:Push , rules]

%for package in package_list:
Simulate_${library}_${package}:PR:
    variables:
        lib_package: ${package}
    extends: .simulate_model_job:PR

%endfor


%for package in package_list:
Simulate_${library}_${package}:Push:
    variables:
        lib_package: ${package}
    extends: .simulate_model_job:Push

%endfor

simulate_whitelist_job:
    image: ${dym_image_name}
    stage:  ${ci_stage_create_exampeL_whitelist}
    before_script:
        - source activate ${python_version}
        - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y)'
        - eval $(ssh-agent -s)
        - mkdir -p ~/.ssh
        - ssh-keyscan github.com >> ~/.ssh/known_hosts
        - ssh-agent -a /tmp/ssh_agent.sock > /dev/null
        - echo "$GITHUB_PRIVATE_KEY" > ~/.ssh/id_rsa
        - chmod 600 ~/.ssh/id_rsa
        - git config --global user.name "$GITLAB_USER_NAME"
        - git config --global user.email "$GITLAB_USER_EMAIL"
    script:
        - mkdir whitelist && cd whitelist
        - git clone --single-branch --branch $CI_COMMIT_REF_NAME git@github.com:$Github_Repository.git
        - cd $CI_PROJECT_NAME
        - git clone ${dymola_python_test_url}
        - pip install -e  ${dymola_python_test_dir}
        - ${xvfb_flag} python ${dymola_python_test_validate_file}  ${arg_wh}
    after_script:
        - cd whitelist && cd $CI_PROJECT_NAME
        - if cat ${config_ci_exit_file} | grep "FAIL"; then
            message="${bot_update_model_wh_commit}" ;
            git add ${wh_model_file} ;
            git commit -m "$message" ;
            git push git@github.com:$Github_Repository.git ;
            exit 0;
          else
            exit 0 ;
          fi
    artifacts:
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - if: $CI_COMMIT_MESSAGE =~ /${ci_create_model_wh_commit}/ && $CI_PIPELINE_SOURCE == "push"
          when: always

