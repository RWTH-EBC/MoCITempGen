stages:
    - ${ci_stage_OM_model_check}

.OM_check_rules:PR:
    rules:
        - if: $CI_PIPELINE_SOURCE == "external_pull_requests"  &&  ${commit_string}
          changes:
            - ${library}/
          when: on_success
        - if: $CI_PIPELINE_SOURCE == "push"  && (${PR_main_branch_rule})
          when: on_success
        - if: $CI_COMMIT_MESSAGE  =~ /${ci_OM_check_commit}/ && $CI_PIPELINE_SOURCE == "push"
          when: always

.OM_check_rules:push:
    rules:
        - if: $CI_PIPELINE_SOURCE == "push"  &&  ${commit_string}
          changes:
            - ${library}/
          when: on_success
        - if:  (${PR_main_branch_rule})
          when: never



.OM_check_model_job:PR:
    image: ${OM_Image}
    stage: ${ci_stage_OM_model_check}
    before_script:
        - id
        - git clone ${dymola_python_test_url}
        - pip install -r ${dymola_python_dir}/requirements.txt
        - su -l openmodelicausers -s /bin/bash
        - id
        - cd /builds/EBC/EBC_all/github_ci/AixLib

    script:
        - python3 ${OM_python_check_model_file}  --package $lib_package --library ${library} ${wh_flag} ${filter_flag} --om-option OM_CHECK
    artifacts:
        when: on_failure
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - !reference [.OM_check_rules:PR, rules]

.OM_check_model_job:push:
    image: ${OM_Image}
    stage: ${ci_stage_OM_model_check}
    before_script:
        - git clone ${dymola_python_test_url}
        - pip install -r ${dymola_python_dir}/requirements.txt
    script:
        - python3 ${OM_python_check_model_file}  --changed-flag --package $lib_package --library ${library} ${wh_flag} ${filter_flag} --om-option OM_CHECK
    artifacts:
        when: on_failure
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - !reference [.OM_check_rules:push, rules]

%for package in package_list:
OM_Check_${library}_${package}:PR:
    variables:
        lib_package: ${package}
    extends: .OM_check_model_job:PR
%endfor


%for package in package_list:
OM_Check_${library}_${package}:push:
    variables:
        lib_package: ${package}
    extends: .OM_check_model_job:push
%endfor


