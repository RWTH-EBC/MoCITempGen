# image_name : ${image_name}
# ci_stage_whitelist_setting : ${ci_stage_whitelist_setting}
# python_version : ${python_version}
# modelicapyci_config_structure_module:  ${modelicapyci_config_structure_module}
# arg_struc_wh : ${arg_struc_wh}
# arg_whitelist_check : ${arg_whitelist_check}
# modelicapyci_html_tidy_module: ${modelicapyci_html_tidy_module}
# arg_whitelist_html : ${arg_whitelist_html}
# arg_whitelist_sim : ${arg_whitelist_sim}
# bot_build_whitelist_commit : ${bot_build_whitelist_commit}
# ci_dir : ${ci_dir}
# ci_build_whitelist_structure_commit : ${ci_build_whitelist_structure_commit}
# expire_in_time : ${expire_in_time}
# xvfb_flag : ${xvfb_flag}
# modelicapyci_test_validate_module : ${modelicapyci_test_validate_module}

include: '${utilities_directory}'

stages:
    - ${ci_stage_whitelist_setting}


CI_Whitelist_Setting:
    image: ${image_name}
    stage: ${ci_stage_whitelist_setting}
    before_script:
        - !reference [.github_ssh_auth, script]
        - !reference [.clone_ci_templates, script]
    script:
        - mkdir build_whitelist
        - cd build_whitelist
        - git clone --single-branch --branch $CI_COMMIT_REF_NAME git@github.com:$Github_Repository.git
        - cd $CI_PROJECT_NAME
        - python -m ${modelicapyci_configuration_module} ${arg_struc_wh}

        - ${xvfb_flag} python -m ${modelicapyci_test_validate_module} ${arg_whitelist_check}
        - ${xvfb_flag} python -m ${modelicapyci_test_validate_module} ${arg_whitelist_sim}
        - message="${bot_build_whitelist_commit}"
        - push_model=$(git ls-files --others --exclude-standard --directory ${ci_dir})
        - git add  $push_model
        - git commit -m "$message"
        - git push --force git@github.com:$Github_Repository.git
    rules:
        - if: $CI_PIPELINE_SOURCE == "push"  &&  $CI_COMMIT_MESSAGE  =~ /${ci_build_whitelist_structure_commit}/
          when: always

    artifacts:
        paths:
            - ${ci_dir}
        expire_in: ${expire_in_time}