# ci_stage_lib_merge : ${ci_stage_lib_merge}# ci_stage_update_whitelist : ${ci_stage_update_whitelist}# ci_stage_open_PR : ${ci_stage_open_PR}# image_name : ${image_name}# python_version : ${python_version}# modelica_py_ci_url : ${modelica_py_ci_url}# git_url : ${git_url}# library : ${library}# merge_branch : ${merge_branch}# modelicapyci_library_merge_module : ${modelicapyci_library_merge_module}# arg_lib : ${arg_lib}# ci_trigger_ibpsa_commit : ${ci_trigger_ibpsa_commit}# expire_in_time : ${expire_in_time}# modelicapyci_html_tidy_module : ${modelicapyci_html_tidy_module}# arg_whitelist_html : ${arg_whitelist_html}# arg_whitelist_check : ${arg_whitelist_check}# arg_whitelist_sim : ${arg_whitelist_sim}# modelicapyci_test_validate_module : ${modelicapyci_test_validate_module}# xvfb_flag : ${xvfb_flag}# arg_lock :  ${arg_lock}# whitelist_library : ${whitelist_library}# bot_merge_commit : ${bot_merge_commit}# result_dir : ${result_dir}# modelicapyci_api_github_module : ${modelicapyci_api_github_module}# arg_api_pr : ${arg_api_pr}include: '${utilities_directory}'stages:    - ${ci_stage_lib_merge}    - ${ci_stage_update_whitelist}    - ${ci_stage_open_PR}IBPSA:    image: ${image_name}    stage: ${ci_stage_lib_merge}    before_script:        - !reference [.clone_ci_templates, script]        - !reference [.github_ssh_auth, script]    script:        - git clone --single-branch --branch ${merge_branch} git@github.com:$Github_Repository.git        - cd $CI_PROJECT_NAME        - git clone ${git_url}        - cd ${library}/Resources/Scripts        - python mergeModelicaIBPSA.py        - cd ../../.. && python -m ${modelicapyci_library_merge_module} ${arg_lib}        - rm -r modelica-ibpsa    rules:        - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == /${merge_branch}/ && $CI_COMMIT_MESSAGE =~ /${ci_trigger_ibpsa_commit}/          when: always    artifacts:        paths:            - ${result_dir}/        expire_in: ${expire_in_time}WhiteList:    stage: ${ci_stage_update_whitelist}    before_script:        - !reference [.clone_ci_templates, script]        - !reference [.github_ssh_auth, script]    script:        - cd Merge_Package/$CI_PROJECT_NAME        - python -m ${modelicapyci_html_tidy_module} ${arg_whitelist_html}        - ${xvfb_flag} python -m ${modelicapyci_test_validate_module} ${arg_whitelist_check}        - ${xvfb_flag} python -m ${modelicapyci_test_validate_module} ${arg_whitelist_sim}        - python -m ${modelicapyci_lock_model_module} ${arg_lock}        - rm -r ${whitelist_library}        - message="${bot_merge_commit}"        - push_model=$(git ls-files --others --exclude-standard --directory ${library})        - git add $push_model        - git commit -m "$message"        - git push --force git@github.com:$Github_Repository.git    rules:        - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == /${merge_branch}/ && $CI_COMMIT_MESSAGE =~ /${ci_trigger_ibpsa_commit}/          when: always    artifacts:        paths:            - ${result_dir}/        expire_in: ${expire_in_time}    allow_failure: true    needs:    - job: IBPSA      artifacts: trueIBPSA_Pull_Request:    stage: ${ci_stage_open_PR}    before_script:        - !reference [.clone_ci_templates, script]        - git config --global user.name "$GITLAB_USER_NAME"        - git config --global user.email "$GITLAB_USER_EMAIL"    script:       - python -m ${modelicapyci_api_github_module} ${arg_api_pr}    rules:       - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == /${merge_branch}/ && $CI_COMMIT_MESSAGE =~ /${ci_trigger_ibpsa_commit}/         when: always