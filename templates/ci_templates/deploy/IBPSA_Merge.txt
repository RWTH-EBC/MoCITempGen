# ci_stage_lib_merge : ${ci_stage_lib_merge}
# ci_stage_update_whitelist : ${ci_stage_update_whitelist}
# ci_stage_open_PR : ${ci_stage_open_PR}
# image_name : ${image_name}
# python_version : ${python_version}
# dymola_python_test_url : ${dymola_python_test_url}
# git_url : ${git_url}
# library : ${library}
# merge_branch : ${merge_branch}
# dymola_python_library_merge_file : ${dymola_python_library_merge_file}
# arg_lib : ${arg_lib}
# ci_trigger_ibpsa_commit : ${ci_trigger_ibpsa_commit}
# expire_in_time : ${expire_in_time}
# dymola_python_html_tidy_file : ${dymola_python_html_tidy_file}
# arg_wh_html : ${arg_wh_html}
# arg_wh_check : ${arg_wh_check}
# arg_wh_sim : ${arg_wh_sim}
# dymola_python_test_validate_file : ${dymola_python_test_validate_file}
# xvfb_flag : ${xvfb_flag}
# arg_lock :  ${arg_lock}
# dymola_python_lock_model_file : ${dymola_python_lock_model_file}
# wh_library : ${wh_library}
# bot_merge_commit : ${bot_merge_commit}
# result_dir : ${result_dir}
# dymola_python_api_github_file : ${dymola_python_api_github_file}
# arg_api_pr : ${arg_api_pr}
# dymola_python_dir: ${dymola_python_dir}

stages:
    - ${ci_stage_lib_merge}
    - ${ci_stage_update_whitelist}
    - ${ci_stage_open_PR}

IBPSA:
    image: ${image_name}
    stage: ${ci_stage_lib_merge}
    before_script:
        - source activate ${python_version}
        - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
        - eval $(ssh-agent -s)
        - mkdir -p ~/.ssh
        - ssh-keyscan github.com >> ~/.ssh/known_hosts
        - ssh-agent -a /tmp/ssh_agent.sock > /dev/null
        - echo "$GITHUB_PRIVATE_KEY" > ~/.ssh/id_rsa
        - chmod 600 ~/.ssh/id_rsa
        - git config --global user.name "$GITLAB_USER_NAME"
        - git config --global user.email "$GITLAB_USER_EMAIL"
        - git clone ${dymola_python_test_url}
        - pip install --use-deprecated=legacy-resolver -r ${dymola_python_dir}/requirements.txt
        - export PYTHONPATH=Dymola_python_tests
    script:
        - git clone --single-branch --branch  ${merge_branch} git@github.com:$Github_Repository.git
        - cd $CI_PROJECT_NAME
        - git clone ${git_url}
        - cd ${library}/Resources/Scripts
        - python mergeModelicaIBPSA.py
        - cd ../../..  && python ${dymola_python_library_merge_file}  ${arg_lib}
        - rm -r modelica-ibpsa
    rules:
        - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == /${merge_branch}/ &&   $CI_COMMIT_MESSAGE  =~ /${ci_trigger_ibpsa_commit}/
          when: always
    artifacts:
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}

WhiteList:
    stage: ${ci_stage_update_whitelist}
    before_script:
        - source activate ${python_version}
        - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
        - eval $(ssh-agent -s)
        - mkdir -p ~/.ssh
        - ssh-keyscan github.com >> ~/.ssh/known_hosts
        - ssh-agent -a /tmp/ssh_agent.sock > /dev/null
        - echo "$GITHUB_PRIVATE_KEY" > ~/.ssh/id_rsa
        - chmod 600 ~/.ssh/id_rsa
        - git config --global user.name "$GITLAB_USER_NAME"
        - git config --global user.email "$GITLAB_USER_EMAIL"
        - git clone ${dymola_python_test_url}
        - pip install --use-deprecated=legacy-resolver -r ${dymola_python_dir}/requirements.txt
        - export PYTHONPATH=Dymola_python_tests

    script:
        - cd Merge_Package/$CI_PROJECT_NAME
        - python ${dymola_python_html_tidy_file} ${arg_wh_html}
        - ${xvfb_flag} python ${dymola_python_test_validate_file}  ${arg_wh_check}
        - ${xvfb_flag} python ${dymola_python_test_validate_file}  ${arg_wh_sim}
        - python ${dymola_python_lock_model_file}   ${arg_lock}
        - rm  -r ${wh_library}
        - message="${bot_merge_commit}"
        - push_model=$(git ls-files --others --exclude-standard --directory ${library})
        - git add  $push_model
        - git commit -m "$message"
        - git push --force git@github.com:$Github_Repository.git
    rules:
        - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == /${merge_branch}/ &&   $CI_COMMIT_MESSAGE  =~ /${ci_trigger_ibpsa_commit}/
          when: always
    artifacts:
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}

    allow_failure: true
    needs:
    - job: IBPSA
      artifacts: true

IBPSA_Pull_Request:
    stage: ${ci_stage_open_PR}
    before_script:
        - source activate ${python_version}
        - git config --global user.name "$GITLAB_USER_NAME"
        - git config --global user.email "$GITLAB_USER_EMAIL"
        - git clone ${dymola_python_test_url}
        - pip install --use-deprecated=legacy-resolver -r ${dymola_python_dir}/requirements.txt
        - export PYTHONPATH=Dymola_python_tests
    script:
       - python  ${dymola_python_api_github_file} ${arg_api_pr}
    rules:
       - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == /${merge_branch}/ &&   $CI_COMMIT_MESSAGE  =~ /${ci_trigger_ibpsa_commit}/
         when: always
