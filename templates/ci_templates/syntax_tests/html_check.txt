# Variables
# image_name : ${image_name}
# ci_stage_html_check : ${ci_stage_html_check}
# ci_stage_html_whitelist : ${ci_stage_html_whitelist}
# ci_stage_open_PR : ${ci_stage_open_PR}
# html_praefix : ${html_praefix}
# ${modelicapyci_html_tidy_module} : modelicapyci_html_tidy_module
# arg_correct_html: ${arg_correct_html}
# result_dir : ${result_dir}
# expire_in_time : ${expire_in_time}
# library : ${library}
# ci_html_commit : ${ci_html_commit}
# ${modelicapyci_api_github_module} : modelicapyci_api_github_module
# arg_PR : ${arg_PR}
# arg_wh : ${arg_wh}
# bot_create_html_file_commit : ${bot_create_html_file_commit}

include: '${utilities_directory}'

image: ${image_name}
stages:
    - ${ci_stage_html_check}
    - ${ci_stage_html_whitelist}
    - ${ci_stage_open_PR}

variables:
    Praefix_Branch: ${html_praefix}
    Newbranch: $Praefix_Branch$CI_COMMIT_REF_NAME



Check_HTML:PR:
    stage: ${ci_stage_html_check}
    before_script:
        - !reference [.activate_python_and_install_requirements, script]
    script:
        - python -m ${modelicapyci_html_tidy_module} ${arg_PR}
    after_script:
        - if ! cat ${config_ci_exit_file} | grep "exit 1"; then
            exit 0;
          fi
        - !reference [.activate_python_and_install_requirements, script]
        - !reference [.github_ssh_auth, script]
        - python -m ${modelicapyci_html_tidy_module} ${arg_correct_html};
        - if [[ $CI_COMMIT_REF_NAME =~ ^$Praefix_Branch ]]; then
            echo "Branch is already used to fix html, exiting";
            exit 1;
          fi
        - git checkout -B $Newbranch;
        - git add ${library};
        - git commit -m "${bot_create_html_file_commit}";
        - git push git@github.com:$Github_Repository.git;
        - exit 1;

    artifacts:
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - if: $CI_COMMIT_MESSAGE  =~ /${ci_html_commit}/ && $CI_PIPELINE_SOURCE == "push"
          when: always
        - !reference [.rules:PR , rules]

Check_HTML:push:
    stage: ${ci_stage_html_check}
    before_script:
        - !reference [.github_ssh_auth, script]
        - !reference [.activate_python_and_install_requirements, script]
    script:
        - python -m ${modelicapyci_html_tidy_module} ${arg_push}
    artifacts:
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - !reference [.rules:push , rules]

Open_Pull_HTML_Request:
    stage: ${ci_stage_open_PR}
    before_script:
        - !reference [.github_ssh_auth, script]
        - !reference [.activate_python_and_install_requirements, script]
    script:
        - python -m ${modelicapyci_api_github_module} ${arg_github_PR}
    rules:
        - if: $CI_COMMIT_MESSAGE =~ /${bot_create_html_file_commit}/ && $CI_COMMIT_BRANCH =~ /^${html_praefix}.*$/ && $CI_PIPELINE_SOURCE == "push"
          when: on_success


html_whitelist_job:
    stage: ${ci_stage_html_whitelist}
    before_script:
        - !reference [.activate_python_and_install_requirements, script]
        - !reference [.github_ssh_auth, script]
    script:
        - python -m ${modelicapyci_html_tidy_module} ${arg_wh}
        - message="${bot_update_whitelist_commit}"
        - files_to_push="${whitelist_html_file}"
        - !reference [.git_push, script]
    artifacts:
        paths:
            - ${result_dir}/
        expire_in: 7 day
    rules:
        - if: $CI_COMMIT_MESSAGE =~ /${ci_create_html_whitelist_commit}/ && $CI_PIPELINE_SOURCE == "push"
          when: always
