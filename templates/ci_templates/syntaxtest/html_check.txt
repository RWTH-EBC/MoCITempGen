#  image_name : ${image_name}
#  ci_stage_html_check : ${ci_stage_html_check}
# ci_stage_html_whitelist : ${ci_stage_html_whitelist}
#  ci_stage_open_PR : ${ci_stage_open_PR}
#  html_praefix : ${html_praefix}
# python_version : ${python_version}
# modelica_py_ci_url : ${modelica_py_ci_url}
# ${modelicapyci_html_tidy_module} : modelicapyci_html_tidy_module
# arg_correct_html: ${arg_correct_html}
# result_dir : ${result_dir}
# expire_in_time : ${expire_in_time}
# commit_string : ${commit_string}
# library : ${library}
# PR_main_branch_rule : ${PR_main_branch_rule}
# ci_html_commit : ${ci_html_commit}
# ${modelicapyci_api_github_module} : modelicapyci_api_github_module
# arg_PR : ${arg_PR}
# arg_wh : ${arg_wh}
# bot_create_html_file_commit : ${bot_create_html_file_commit}

include: '${utilities_directory}'

image: ${image_name}
stages:
    - ${ci_stage_html_check}
    - ${ci_stage_html_whitelist}
    - ${ci_stage_open_PR}

variables:
    Praefix_Branch: ${html_praefix}
    Newbranch: $Praefix_Branch$CI_COMMIT_REF_NAME



.html_rules:PR:
    rules:
        - if: $CI_PIPELINE_SOURCE == "external_pull_request_event"  &&  ${commit_string}
          when: on_success
        - if: $CI_PIPELINE_SOURCE == "push"  && (${PR_main_branch_rule})
          when: on_success
        - if: $CI_COMMIT_MESSAGE  =~ /${ci_html_commit}/ && $CI_PIPELINE_SOURCE == "push"
          when: always

.html_rules:push:
    rules:
        - if: $CI_PIPELINE_SOURCE == "push"  &&  ${commit_string}
          when: on_success
        - if:  (${PR_main_branch_rule})
          when: never


Check_HTML:PR:
    stage: ${ci_stage_html_check}
    before_script:
        - !reference [.clone_ci_templates, script]

    script:
        - python -m ${modelicapyci_html_tidy_module} ${arg_PR}
    artifacts:
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - !reference [.html_rules:PR , rules]

Check_HTML:push:
    stage: ${ci_stage_html_check}
    before_script:
        - !reference [.github_ssh_auth, script]
        - !reference [.clone_ci_templates, script]
    script:
        - python -m ${modelicapyci_html_tidy_module} ${arg_push}
    artifacts:
        paths:
            - ${result_dir}/
        expire_in: ${expire_in_time}
    rules:
        - !reference [.html_rules:push , rules]



Open_Pull_HTML_Request:
    stage: ${ci_stage_open_PR}
    before_script:
        - !reference [.github_ssh_auth, script]
        - !reference [.clone_ci_templates, script]
    script:
        - python -m ${modelicapyci_api_github_module} ${arg_github_PR}
    rules:
        - if: $CI_COMMIT_MESSAGE =~ /${bot_create_html_file_commit}/ && $CI_COMMIT_BRANCH =~ /^${html_praefix}.*$/ && $CI_PIPELINE_SOURCE == "push"
          when: on_success


html_whitelist_job:
    stage: ${ci_stage_html_whitelist}
    before_script:
        - !reference [.clone_ci_templates, script]
        - !reference [.github_ssh_auth, script]

    script:
        - mkdir whitelist && cd whitelist
        - git clone --single-branch --branch $CI_COMMIT_REF_NAME git@github.com:$Github_Repository.git
        - cd $CI_PROJECT_NAME
        - python -m ${modelicapyci_html_tidy_module} ${arg_wh}        - message="${bot_update_whitelist_commit}"
        - git add ${whitelist_html_file}
        - git commit -m "$message"
        - git push git@github.com:$Github_Repository.git
    artifacts:
        paths:
            - ${result_dir}/
        expire_in: 7 day
    rules:
        - if: $CI_COMMIT_MESSAGE =~ /${ci_create_html_whitelist_commit}/ && $CI_PIPELINE_SOURCE == "push"
          when: always
