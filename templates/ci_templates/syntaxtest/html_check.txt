stages:
    - ${ci_stage_html_check}
    - ${ci_stage_html_whitelist}
    - ${ci_stage_open_PR}

variables:
    Praefix_Branch: ${html_praefix}
    Newbranch: $Praefix_Branch$CI_COMMIT_REF_NAME

Correct_check_HTML:
    stage: ${ci_stage_html_check}
    before_script:
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate ${python_version}
        - export PYTHONIOENCODING=utf-8
        - git clone ${modelica_ci_test_url}
    script:
        - python ${dymola_python_html_tidy_file} --s ${library} --correct-view --log  --filter-whitelist
    artifacts:
        paths:
            - ${library}/HTML_correct_log.txt
            - ${library}/HTML_error_log.txt
        expire_in: ${expire_in_time}
    except:
        refs:
            - external_pull_requests 
    only:
        refs:
            - /^${html_praefix}.*$/
        variables:
            - $CI_COMMIT_MESSAGE =~ /${bot_create_html_file_commit}/

Open_Pull_HTML_Request:
    stage: ${ci_stage_open_PR}
    before_script:
        - source activate ${python_version}
        - pip install --upgrade pip &&  apt-get update -y && apt-get install zip unzip -y
        - pip install requests toml
        - export PYTHONIOENCODING=utf-8 # just in case
        - git config --global user.name "$GITLAB_USER_NAME"
        - git config --global user.email "$GITLAB_USER_EMAIL"
        - git clone ${modelica_ci_test_url}
    script:
        - python ${dymola_python_api_github_file} --github-repo $Github_Repository --working-branch $CI_COMMIT_REF_NAME --github-token $GITHUB_API_TOKEN --create-pr --correct-html
    except:
        refs:
            - external_pull_requests
    only:
        refs:
            - /^${html_praefix}.*$/
        variables:
            - $CI_COMMIT_MESSAGE =~ /${bot_create_html_file_commit}/

HTML_PR_Checks:
    stage: ${ci_stage_html_check}
    before_script:
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate ${python_version}
        - export PYTHONIOENCODING=utf-8 # just in case
        - git clone ${modelica_ci_test_url}
    script:
        - python ${dymola_python_html_tidy_file} --s ${library} --correct-view --log  --filter-whitelist
    artifacts:
        when: on_failure
        paths:
            - ${library}/HTML_correct_log.txt
            - ${library}/HTML_error_log.txt
        expire_in: ${expire_in_time}
    only:
        refs:
            - external_pull_requests
    except:
        variables:
            %for commit in except_commit_list:
            - $CI_COMMIT_MESSAGE  =~ /${commit}/
            %endfor
        refs:
            %for branch in except_branch_list:
            - ${branch}
            %endfor
  
HTML_Check:
    stage: ${ci_stage_html_check}
    before_script:
        - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
        - eval $(ssh-agent -s)
        - mkdir -p ~/.ssh
        - ssh-keyscan github.com >> ~/.ssh/known_hosts
        - ssh-agent -a /tmp/ssh_agent.sock > /dev/null
        - echo "$GITHUB_PRIVATE_KEY" > ~/.ssh/id_rsa
        - chmod 600 ~/.ssh/id_rsa
        - git config --global user.name "$GITLAB_USER_NAME"
        - git config --global user.email "$GITLAB_USER_EMAIL"
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate ${python_version}
        - export PYTHONIOENCODING=utf-8
        - git clone ${modelica_ci_test_url}
    script:
        - python ${dymola_python_html_tidy_file} --s ${library} --correct-view --log   --filter-whitelist
    after_script:
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate ${python_version}
        - export PYTHONIOENCODING=utf-8
        - if cat ${config_ci_exit_file} | grep "exit 1"; then
            mkdir CorrectedVersion &&  cd CorrectedVersion ;
            git clone --single-branch --branch $CI_COMMIT_REF_NAME git@github.com:$Github_Repository.git;
            cd $CI_PROJECT_NAME;
            git clone ${modelica_ci_test_url} ;
            python ${dymola_python_html_tidy_file} --s ${library} --correct-overwrite --filter-whitelist --log;
            git checkout -B $Newbranch;
            message="${bot_create_html_file_commit}";
            git add ${library} ;
            echo $message;
            git commit -m "$message" ;
            git push --force git@github.com:$Github_Repository.git;
            wait ;
            exit 1;
          else 
            exit 0; 
          fi
    artifacts:
        when: on_failure
        paths:
            - ${library}/HTML_correct_log.txt
            - ${library}/HTML_error_log.txt
        expire_in: ${expire_in_time}
    except:
        refs:
            - external_pull_requests
            - /^${html_praefix}.*$/
            ${merge_branch}
        variables:
            %for commit in except_commit_list:
            - $CI_COMMIT_MESSAGE  =~ /${commit}/
            %endfor

CI_HTML_Check:
    stage: ${ci_stage_html_check}
    before_script:
        - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
        - eval $(ssh-agent -s)
        - mkdir -p ~/.ssh
        - ssh-keyscan github.com >> ~/.ssh/known_hosts
        - ssh-agent -a /tmp/ssh_agent.sock > /dev/null
        - echo "$GITHUB_PRIVATE_KEY" > ~/.ssh/id_rsa
        - chmod 600 ~/.ssh/id_rsa
        - git config --global user.name "$GITLAB_USER_NAME"
        - git config --global user.email "$GITLAB_USER_EMAIL"
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate ${python_version}
        - export PYTHONIOENCODING=utf-8
        - git clone ${modelica_ci_test_url}
    script:
        - python ${dymola_python_html_tidy_file} --s ${library} --correct-view --log   --filter-whitelist
    after_script:
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate ${python_version}
        - export PYTHONIOENCODING=utf-8
        - if cat ${config_ci_exit_file} | grep "exit 1"; then
            mkdir CorrectedVersion &&  cd CorrectedVersion ;
            git clone --single-branch --branch $CI_COMMIT_REF_NAME git@github.com:$Github_Repository.git;
            cd $CI_PROJECT_NAME;
            git clone ${modelica_ci_test_url} ;
            python ${dymola_python_html_tidy_file} --s ${library} --correct-overwrite --filter-whitelist --log;
            git checkout -B $Newbranch;
            message="${bot_create_html_file_commit}";
            git add ${library} ;
            git commit -m "$message" ;
            git push --force git@github.com:$Github_Repository.git;
            wait ;
            exit 1;
          else 
            exit 0; 
          fi
    artifacts:
        when: on_failure
        paths:
            - ${library}/HTML_correct_log.txt
            - ${library}/HTML_error_log.txt
        expire_in: ${expire_in_time}
    except:
        refs:
            - external_pull_requests
    only:
        variables:
            - $CI_COMMIT_MESSAGE  =~ /${ci_html_commit}/



html_whitelist_job:
    stage: ${ci_stage_html_whitelist}
    before_script:
        - export PIP_CACHE_DIR="/opt/cache/pip"
        - source activate ${python_version}
        - export PYTHONIOENCODING=utf-8
        - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
        - eval $(ssh-agent -s)
        - mkdir -p ~/.ssh
        - ssh-keyscan github.com >> ~/.ssh/known_hosts
        - ssh-agent -a /tmp/ssh_agent.sock > /dev/null
        - echo "$GITHUB_PRIVATE_KEY" > ~/.ssh/id_rsa
        - chmod 600 ~/.ssh/id_rsa
        - git config --global user.name "$GITLAB_USER_NAME"
        - git config --global user.email "$GITLAB_USER_EMAIL"
    script:
        - mkdir whitelist && cd whitelist
        - git clone --single-branch --branch $CI_COMMIT_REF_NAME git@github.com:$Github_Repository.git
        - cd $CI_PROJECT_NAME
        - git clone ${modelica_ci_test_url} ;
        - python ${dymola_python_html_tidy_file} --whitelist ${git}
        - message="${bot_update_wh_commit}"
        - git add ${wh_html_file}
        - git commit -m "$message"
        - git push git@github.com:$Github_Repository.git
    artifacts:
        paths:
            - whitelist/$CI_PROJECT_NAME/${wh_html_file}
        expire_in: 7 day 
    only:
        variables:
            - $CI_COMMIT_MESSAGE =~ /${ci_create_html_wh_commit}/
    except:
        refs:
            - external_pull_requests