import argparse
import os
from pathlib import Path
import sys
from mako.template import Template
import tomli_w as tomlwriter

class Config_toml_Parser(object):

    def __init__(self):
        pass

    def _load_parser_arg(self):
        %for path in path_list:
        from ${path} import Parser
        %endfor
        module_list = []
        %for modul in modul_list:
        import ${modul}

        module_list.append(${modul}.Parser)
        %endfor
        modul_dict = {}
        for module in module_list:
            pars_arg_dict = {}
            class_modul_dict = {}
            str_class_module = str(module)
            str_module =  str_class_module[str_class_module.find("'")+1:str_class_module.rfind(".")]
            args = module.main(sys.argv[1:])
            for arg in vars(args):
                pars_arg_dict[arg] = str(getattr(args, arg))
            class_modul_dict["Parser"] = pars_arg_dict
            modul_dict[str_module] = class_modul_dict
        return modul_dict

    def write_toml_parser(self, parser_list):
        my_template = Template(filename="${toml_txt}")
        config_text = my_template.render(parser_list=parser_list)
        yml_tmp = open("${toml_file}", "w")
        yml_tmp.write(config_text.replace('\n', ''))
        yml_tmp.close()

    def write_tomli_w_parser(self, parser_dict):
        with open("templates\config_templates\parser.toml", "wb") as f:
            tomlwriter.dump(parser_dict, f)
        print("Finish toml.")

if __name__ == '__main__':
    conf = Config_toml_Parser()
    pars = conf._load_parser_arg()
    #conf.write_toml_parser(parser_list = pars)
    conf.write_tomli_w_parser(parser_dict=pars)